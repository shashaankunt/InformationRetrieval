
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Bomule
 */
public class Third extends javax.swing.JFrame {

    /**
     * Creates new form Third
     */
    public Third() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BuildIndex = new javax.swing.JButton();
        TextArea = new javax.swing.JTextField();
        Search = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        BuildIndex.setText("BuildIndex");
        BuildIndex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuildIndexActionPerformed(evt);
            }
        });

        TextArea.setText("Text Area!");

        Search.setText("Search");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(260, 260, 260)
                        .addComponent(BuildIndex))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(TextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(Search)))
                .addContainerGap(218, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BuildIndex)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TextArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Search))
                .addContainerGap(314, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BuildIndexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuildIndexActionPerformed
        // TODO add your handling code here:
        Queue<String> queue = new LinkedList<String>();
	       
	        queue.add("http://computerscience.engineering.unt.edu");
	        queue.add("https://www.unt.edu/");
	        HashSet<String> set = new HashSet<String>(); 
	        
	        Queue<String> queue1 = new LinkedList<String>();
	        for(int i=1;i<10;)
	        {
		 String abc=queue.remove();
		 if(abc.contains("unt.edu"))
		 {
		 if(set.contains(abc))
		 {
			// System.out.println("Already in set");
			
			 continue;
			 
		 }
		 else
		 {
			
		 Pattern pattern = Pattern.compile("^(https?|http)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]");
	    	Matcher matcher = pattern.matcher(abc);

		    if(matcher.matches())
		    {
		    	
	               
	      
	    	                     if(abc.endsWith("/"))
	    	             {
	    		   
	    		   
	    		   int index=abc.lastIndexOf('/');
	    		    String new1 =abc.substring(0,index); 
	    		   try{
	    			   if(set.contains(new1))
	    				 {
	    					// System.out.println("Already in set");
	    					
	    					 continue;
	    					 
	    				 }
	    			   else
	    			   {
	    				   set.add(new1);
	    		    Document doc1 = Jsoup.connect(new1).get();
	    	        Elements links1 = doc1.select("a[href]");
	    	               for (Element link1 : links1)
	    	               {
		    		             String linkatt= link1.attr("abs:href");
		    		     if(set.contains(linkatt))
		    		     {
		    		    	 continue;
		    		     }
		    		     else
		    		     {
		    		          queue.add(linkatt);
		    		     } }
	    	               PrintWriter printWriter = new PrintWriter ("C:\\Users\\Bomule\\Desktop\\IRS\\cranfieldDoc\\file"+i+".txt");
	    	               printWriter.print("<URL>");
	    	               printWriter.print(new1);
	    	               printWriter.print("</URL>");
	    	              // printWriter.println("\n");
	    	               printWriter.print("<TITLE>");
	    	               String title=doc1.title();
	    	               if(title.isEmpty())
  	    		      	   {
  	    		      		 printWriter.print(new1);
  	    		      	   }
  	    		      	   else
  	    		      	   {
  	    		      	 printWriter.print(title);
  	    		      	   }
	    	               printWriter.print("</TITLE>");
	    	               printWriter.print("<DOCNO>");
	    		      	    printWriter.print (""+i);
	     	               printWriter.print("</DOCNO>");
	     	              //printWriter.println("\n");
	     	              printWriter.print("<TEXT>");
	    		      	   String text = doc1.body().text();
	    		      	 if(text.isEmpty())
	    		      	   {
	    		      		 printWriter.print(new1);
	    		      	   }
	    		      	   else
	    		      	   {
	    		      	 printWriter.print(text);
	    		      	   }
	    		      	 printWriter.print("</TEXT>");
	    		      i++;
	    		      	 printWriter.close();
	    			   }
	    		   }
	    		   finally{
	    		   continue;
	    		   }
	    	   }
	    	                     else if(abc.contains("/#"))
	    	   {
	    		   
	    		   
	    		   int index=abc.lastIndexOf('/');
	    		    String new1 =abc.substring(0,index);
	    		    try
	    		    { if(set.contains(new1))
   				 {
   					// System.out.println("Already in set");
   					
   					 continue;
   					 
   				 }
   			   else
   			   {
   				   set.add(new1);
	    		    Document doc1 = Jsoup.connect(new1).get();
	    	        Elements links1 = doc1.select("a[href]");
	    	               for (Element link1 : links1)
	    	               {
		    		             String linkatt= link1.attr("abs:href");
		    		             if(set.contains(linkatt))
				    		     {
				    		    	 continue;
				    		     }
				    		     else
				    		     {
				    		          queue.add(linkatt);
				    		     }
	    	               }
	    	               PrintWriter printWriter = new PrintWriter ("C:\\Users\\Bomule\\Desktop\\IRS\\cranfieldDoc\\file"+i+".txt");
	    	               printWriter.print("<URL>");
	    	               printWriter.print(new1);
	    	               printWriter.print("</URL>");
	    	               //printWriter.println("\n");
	    	               printWriter.print("<TITLE>");
	    	               String title=doc1.title();
	    	               if(title.isEmpty())
  	    		      	   {
  	    		      		 printWriter.print(new1);
  	    		      	   }
  	    		      	   else
  	    		      	   {
  	    		      	 printWriter.print(title);
  	    		      	   }
	    	               printWriter.print("</TITLE>");
	    	               printWriter.print("<DOCNO>");
	    		      	    printWriter.print (""+i);
	     	               printWriter.print("</DOCNO>");
	     	          //    printWriter.print("\n");
	     	              printWriter.print("<TEXT>");
	    		      	   String text = doc1.body().text();
	    		      	 if(text.isEmpty())
	    		      	   {
	    		      		 printWriter.print(new1);
	    		      	   }
	    		      	   else
	    		      	   {
	    		      	 printWriter.print(text);
	    		      	   }
	    		      	 printWriter.print("</TEXT>");
	    		      	i++;
	    		      	 printWriter.close();
   			   } }
	    		    finally{
	 	    		   continue;
	 	    		   }
	    	   }
	    	                     else   if(abc.contains("#"))
	    	   {
	    		   int index=abc.lastIndexOf('#');
	    		    String new1 =abc.substring(0,index);
	    		    try
	    		    {
	    		    	 if(set.contains(new1))
	    				 {
	    					// System.out.println("Already in set");
	    					
	    					 continue;
	    					 
	    				 }
	    			   else
	    			   {
	    				   set.add(new1);
	    		    Document doc1 = Jsoup.connect(new1).get();
	    	        Elements links1 = doc1.select("a[href]");
	    	               for (Element link1 : links1)
	    	               {
		    		             String linkatt= link1.attr("abs:href");
		    		             if(set.contains(linkatt))
				    		     {
				    		    	 continue;
				    		     }
				    		     else
				    		     {
				    		          queue.add(linkatt);
				    		     }
	    	               }
	    	               PrintWriter printWriter = new PrintWriter ("C:\\Users\\Bomule\\Desktop\\IRS\\cranfieldDoc\\file"+i+".txt");
	    	               printWriter.print("<DOCNO>");
	    		      	    printWriter.print (""+i);
	     	               printWriter.print("</DOCNO>");
	    	               printWriter.print("<URL>");
	    	               printWriter.print(new1);
	    	               printWriter.print("</URL>");
	    	               printWriter.print("<TITLE>");
	    	               String title=doc1.title();
	    	               if(title.isEmpty())
  	    		      	   {
  	    		      		 printWriter.print(new1);
  	    		      	   }
  	    		      	   else
  	    		      	   {
  	    		      	 printWriter.print(title);
  	    		      	   }
	    	               printWriter.print("</TITLE>");
	    	              // printWriter.print("\n");
	    	         
	     	             // printWriter.print("\n");
	     	              printWriter.print("<TEXT>");
	    		      	   String text = doc1.body().text();
	    		      	 if(text.isEmpty())
	    		      	   {
	    		      		 printWriter.print(new1);
	    		      	   }
	    		      	   else
	    		      	   {
	    		      	 printWriter.print(text);
	    		      	   }
	    		      	 printWriter.print("</TEXT>");
	    		      	i++;
	    		      	 printWriter.close();
	    			   }}
	    		    finally{
	 	    		   continue;
	 	    		   }
	    	   }
	    	   
	    	                     else
	    	                     {
	    	                    	 try
	    	                    	 {
	    	                    		 if(set.contains(abc))
	    	    	    				 {
	    	    	    					 System.out.println("Already in set");
	    	    	    					
	    	    	    					 continue;
	    	    	    					 
	    	    	    				 }
	    	    	    			   else
	    	    	    			   {
	    	    	    				   set.add(abc);
	    	                    	 Document doc1 = Jsoup.connect(abc).get();
	    	     	    	        Elements links1 = doc1.select("a[href]");
	    	     	    	               for (Element link1 : links1)
	    	     	    	               {
	    	     		    		             String linkatt= link1.attr("abs:href");
	    	     		    		            if(set.contains(linkatt))
	    	     				    		     {
	    	     				    		    	 continue;
	    	     				    		     }
	    	     				    		     else
	    	     				    		     {
	    	     				    		          queue.add(linkatt);
	    	     				    		     }
	    	     	    	               } 
	    	     	    	              PrintWriter printWriter = new PrintWriter ("C:\\Users\\Bomule\\Desktop\\IRS\\cranfieldDoc\\file"+i+".txt");
	    	     	    	             printWriter.print("<DOCNO>");
		    	  	    		      	    printWriter.print (""+i);
		    	  	     	               printWriter.print("</DOCNO>");
	    	     	    	              printWriter.print("<URL>");
	    	  	    	               printWriter.print(abc);
	    	  	    	               printWriter.print("</URL>");
	    	  	    	             printWriter.print("<TITLE>");
	    		    	               String title=doc1.title();
	    		    	               if(title.isEmpty())
	    	  	    		      	   {
	    	  	    		      		 printWriter.print(abc);
	    	  	    		      	   }
	    	  	    		      	   else
	    	  	    		      	   {
	    	  	    		      	 printWriter.print(title);
	    	  	    		      	   }
	    		    	               printWriter.print("</TITLE>");
	    	  	    	              // printWriter.print("\n");
	    	  	    	               
	    	  	     	              //printWriter.print("\n");
	    	  	     	              printWriter.print("<TEXT>");
	    	  	    		      	   String text = doc1.body().text();
	    	  	    		      	   if(text.isEmpty())
	    	  	    		      	   {
	    	  	    		      		 printWriter.print(abc);
	    	  	    		      	   }
	    	  	    		      	   else
	    	  	    		      	   {
	    	  	    		      	 printWriter.print(text);
	    	  	    		      	   }
	    	  	    		      	 printWriter.print("</TEXT>");
	    	  	    		      	i++;
	    	  	    		      	 printWriter.close();
	    	    	    			   } }
	    	     	    	              finally{
	    	     	    		    		   continue;
	    	     	    		    		   }
	    	                     }
	       }
	        
		    else{
		    	continue;
		    }
	        }
		 }
		 else{
		    	continue;
		    }
		 
	        }
                 TextArea.setText("Enter Query!");
    
        
        
        
    }//GEN-LAST:event_BuildIndexActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        // TODO add your handling code here:
        String abc= this.TextArea.getText();
        try {
            VectRetrieval.main(abc);
            
        } catch (IOException ex) {
            Logger.getLogger(Third.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Third.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Third.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Third.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Third.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Third().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton BuildIndex;
    public javax.swing.JButton Search;
    public javax.swing.JTextField TextArea;
    // End of variables declaration//GEN-END:variables
}
